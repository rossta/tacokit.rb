require 'spec_helper'

describe Tacokit::Client::Cards do
  def test_card_link
    'k7GHJj7Q'
  end

  def test_card_id
    '548dd95c8ca25ac9d0d9ce71'
  end

  def test_list_id
    '548dd948ffd374221926b4c8'
  end

  describe "#card", :vcr do
    it "returns a card by short link" do
      card = app_client.card(test_card_link)

      expect(card.name).to eq 'Card 1'
    end

    it "returns a card by id" do
      card = app_client.card(test_card_id)

      expect(card.name).to eq 'Card 1'
    end
  end

  describe "#card_field", :vcr do
    it "returns a value" do
      field = app_client.card_field(test_card_link, :email)

      expect(field['_value']).to be_present
    end

    it "returns an array" do
      field = app_client.card_field(test_card_link, :labels)

      expect(field).to be_any

      label = field.first
      expect(label.to_attrs).to include(color: "green")
    end

    it "returns a hash" do
      field = app_client.card_field(test_card_link, :labels)

      expect(field.first.to_attrs).to include(color: "green")
    end
  end

  describe "#card_resource", :vcr do
    it "returns card actions" do
      actions = app_client.card_resource(test_card_link, :actions)

      expect(actions).to be_empty
    end

    it "returns card board" do
      board = app_client.card_resource(test_card_link, :board)

      expect(board.name).to be_present
    end

    it "returns card check item states" do
      states = app_client.card_resource(test_card_link, :check_item_states)

      expect(states).to be_any

      state = states.first
      expect(state.state).to be_present
    end
  end

  describe "#update_card", :vcr do
    it "updates a card" do
      card = app_client.update_card test_card_link,
        desc: 'This card is for Tacokit testing',
        labels: ['blue', 'green']

      expect(card.desc).to eq 'This card is for Tacokit testing'
      expect(card.labels.size).to eq(2)
      assert_requested :put, trello_url_template("cards/#{test_card_link}{?key,token}")
    end
  end

  describe "#create_card", :vcr do
    before do
      @card = app_client.create_card test_list_id, "Autocard", desc: "This is an autogenerated card"
    end

    it "creates a card" do
      expect(@card.name).to eq "Autocard"
      expect(@card.desc).to eq "This is an autogenerated card"
      assert_requested :post, trello_url_template("cards{?key,token}")
    end

    after do
      app_client.delete_card(@card.id)
    end
  end

  describe "#delete_card", :vcr do
    before do
      @card = app_client.create_card test_list_id, "Autocard"
    end

    it "deletes a card" do
      app_client.delete_card(@card.id)

      assert_requested :delete, trello_url_template("cards/#{@card.id}{?key,token}")
      expect { app_client.card(@card.id) }.to raise_error(Tacokit::Error::ResourceNotFound)
    end
  end

  describe "#create_card_attachment", :vcr do
    before do
      @card = app_client.create_card test_list_id, "Autocard", desc: "This is an autogenerated card"
    end

    it "uploads local file" do
      file_path = File.expand_path('../../../fixtures/taco.png', __FILE__)
      expect(File.exist?(file_path)).to be_truthy

      attachment = app_client.create_card_attachment(@card.id, file_path, 'image/png', name: 'taco')

      expect(attachment.name).to eq('taco')

      # TODO: mime_type for upload is not persisted on Trello
      # expect(attachment.mime_type).to eq('image/png')
    end

    it "attaches external url" do
      url = 'http://cl.ly/image/2p1x3K1X160b/taco.png'
      attachment = app_client.create_card_attachment(@card.id, url, 'image/png', name: 'taco')

      expect(attachment.name).to eq('taco')

      # TODO: mime_type for upload is not persisted on Trello
      # expect(attachment.mime_type).to eq('image/png')
    end

    after do
      app_client.delete_card(@card.id)
    end
  end

  describe "#create_card_comment", :vcr do
    before do
      @card = app_client.create_card test_list_id, "Autocard", desc: "This is an autogenerated card"
    end

    it "creates a comment" do
      comment = app_client.create_card_comment(@card.id, "I'm singing, I'm singing, I'm singing!")

      expect(comment.data.text).to eq "I'm singing, I'm singing, I'm singing!"
      expect(comment.data.card.id).to eq @card.id

      actions = app_client.card_resource(@card.id, "actions")
      expect(actions.map(&:id)).to include(comment.id)
    end

    after do
      app_client.delete_card(@card.id)
    end
  end

  describe "#delete_card_resource", :vcr do
    before do
      @card = app_client.create_card test_list_id, "Autocard", desc: "This is an autogenerated card"
      @comment = app_client.create_card_comment(@card.id, "I'm singing, I'm singing, I'm singing!")
    end

    it "deletes resource" do
      app_client.delete_card_resource @card.id, "actions", @comment.id, "comments"

      actions = app_client.card_resource(@card.id, "actions")

      expect(actions).to be_empty
    end

    after do
      app_client.delete_card(@card.id)
    end
  end
end
